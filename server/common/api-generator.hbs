import axios, { AxiosResponse } from "axios"
import Cookies from "universal-cookie";
import cookieKeys from "@/constants/cookie-keys";
const lang = "en"
const routeParamRegex = /^:(\w+)$/;
// Model Imports
import { {{#each imports}}
{{this}},{{/each}}
} from "models"

function createAxiosInstance() {
    const token = new Cookies().get(cookieKeys.COOKIE_USER_TOKEN, { doNotParse: true} )
    return axios.create({ baseURL: (process.env.NEXT_PUBLIC_BASE_URL ?? 'http://localhost:3000') + "/api", headers: { "Authorization": `Bearer ${token}`, "Accept-Language": lang } })
}

function createUrl(params: { [key: string]: string }, route: string) {
    let url = ""
    for (const block of route.substring(1).split("/")) {
        url += "/"
        const paramRegExpArray = block.match(routeParamRegex)
        if (paramRegExpArray == null) { url += block; continue }
        else url += params[`${Object.keys(params).find(p => p === paramRegExpArray[1])}`]
    }
    return url
}

export default {
    {{#each controllers}}
    {{@key}}: {
        {{#each this}}
        async {{@key}}({{#if this.params.hasBody}}
            body: {{#if this.params.body}}{ {{#each this.params.body}}{{stringify this}}: any,{{/each}}{{/if}}{{#unless this.params.body}}{{this.params.bodyClass}}{{/unless}},{{/if}}{{#if this.params.hasQueries}}
            queries: {{#if this.params.queries}}{ {{#each this.params.queries}}{{this}}: string,{{/each}} }{{/if}}{{#unless this.params.queries}}{{this.params.queriesClass}}{{/unless}},{{/if}}{{#if this.params.hasParams}}
            params: {{#if this.params.params}}{ {{#each this.params.params}}{{this}}: string,{{/each}} }{{/if}}{{#unless this.params.params}}{{this.params.paramsClass}}{{/unless}},{{/if}}
        ) : Promise<AxiosResponse<{{this.promiseReturnType}}{{#if this.returnsArray}}[]{{/if}}>>
        {
            const route = "{{this.route}}"
            const url = {{#if this.params.hasParams}}createUrl(params, route){{else}}route{{/if}}
            return await createAxiosInstance().request({
                method: "{{this.method}}",
                url,{{#if this.params.hasBody}}
                data: body,{{/if}}{{#if this.params.hasQueries}}
                params: queries,{{/if}}
            })
        },
        {{/each}}
    },
    {{/each}}
    
} 